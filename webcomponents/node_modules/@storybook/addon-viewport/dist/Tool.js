"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.entries");

require("core-js/modules/es.object.get-own-property-descriptor");

require("core-js/modules/es.object.get-prototype-of");

require("core-js/modules/es.object.set-prototype-of");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.string.bold");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _memoizerific = _interopRequireDefault(require("memoizerific"));

var _utilDeprecate = _interopRequireDefault(require("util-deprecate"));

var _theming = require("@storybook/theming");

var _components = require("@storybook/components");

var _coreEvents = require("@storybook/core-events");

var _constants = require("./constants");

var _defaults = require("./defaults");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var toList = (0, _memoizerific["default"])(50)(function (items) {
  return items ? Object.entries(items).map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        id = _ref2[0],
        value = _ref2[1];

    return Object.assign({}, value, {
      id: id
    });
  }) : [];
});
var iframeId = 'storybook-preview-iframe';
var createItem = (0, _memoizerific["default"])(1000)(function (id, name, value, change) {
  return {
    id: id || name,
    title: name,
    onClick: function onClick() {
      change({
        selected: id,
        expanded: false
      });
    },
    right: "".concat(value.width.replace('px', ''), "x").concat(value.height.replace('px', '')),
    value: value
  };
});

var flip = function flip(_ref3) {
  var width = _ref3.width,
      height = _ref3.height;
  return {
    height: width,
    width: height
  };
};

var deprecatedViewportString = (0, _utilDeprecate["default"])(function () {
  return 0;
}, 'The viewport parameter must be an object with keys `viewports` and `defaultViewport`');
var deprecateOnViewportChange = (0, _utilDeprecate["default"])(function () {
  return 0;
}, 'The viewport parameter `onViewportChange` is no longer supported');
var getState = (0, _memoizerific["default"])(10)(function (props, state, change) {
  var data = props.api.getCurrentStoryData();
  var parameters = data && data.parameters && data.parameters[_constants.PARAM_KEY];

  if (parameters && _typeof(parameters) !== 'object') {
    deprecatedViewportString();
  }

  var _ref4 = parameters || {},
      disable = _ref4.disable,
      viewports = _ref4.viewports,
      defaultViewport = _ref4.defaultViewport,
      onViewportChange = _ref4.onViewportChange;

  if (onViewportChange) {
    deprecateOnViewportChange();
  }

  var list = disable ? [] : toList(viewports || _defaults.INITIAL_VIEWPORTS);
  var selected = state.selected === 'responsive' || list.find(function (i) {
    return i.id === state.selected;
  }) ? state.selected : list.find(function (i) {
    return i["default"];
  }) || defaultViewport || _defaults.DEFAULT_VIEWPORT;
  var resets = selected !== 'responsive' ? [{
    id: 'reset',
    title: 'Reset viewport',
    onClick: function onClick() {
      change({
        selected: undefined,
        expanded: false
      });
    }
  }, {
    id: 'rotate',
    title: 'Rotate viewport',
    onClick: function onClick() {
      change({
        isRotated: !state.isRotated,
        expanded: false
      });
    }
  }] : [];
  var items = list.length ? resets.concat(list.map(function (_ref5) {
    var id = _ref5.id,
        name = _ref5.name,
        value = _ref5.styles;
    return createItem(id, name, value, change);
  })) : list;
  return {
    isRotated: state.isRotated,
    items: items,
    selected: selected
  };
});

var ActiveViewportSize = _theming.styled.div(function () {
  return {
    display: 'inline-flex'
  };
});

var ActiveViewportLabel = _theming.styled.div(function (_ref6) {
  var theme = _ref6.theme;
  return {
    display: 'inline-block',
    textDecoration: 'none',
    padding: '10px',
    fontWeight: theme.typography.weight.bold,
    fontSize: theme.typography.size.s2 - 1,
    lineHeight: 1,
    height: 40,
    border: 'none',
    borderTop: '3px solid transparent',
    borderBottom: '3px solid transparent',
    background: 'transparent'
  };
});

var IconButtonWithLabel = (0, _theming.styled)(_components.IconButton)(function () {
  return {
    display: 'inline-flex',
    alignItems: 'center'
  };
});

var IconButtonLabel = _theming.styled.div(function (_ref7) {
  var theme = _ref7.theme;
  return {
    fontSize: theme.typography.size.s2 - 1,
    marginLeft: '10px'
  };
});

var ViewportTool =
/*#__PURE__*/
function (_Component) {
  _inherits(ViewportTool, _Component);

  function ViewportTool(props) {
    var _this;

    _classCallCheck(this, ViewportTool);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ViewportTool).call(this, props));

    _this.change = function () {
      var _this2;

      return (_this2 = _this).setState.apply(_this2, arguments);
    };

    _this.flipViewport = function () {
      return _this.setState(function (_ref8) {
        var isRotated = _ref8.isRotated;
        return {
          isRotated: !isRotated,
          expanded: false
        };
      });
    };

    _this.resetViewport = function (e) {
      e.stopPropagation();
      e.nativeEvent.stopImmediatePropagation();

      _this.setState({
        selected: undefined,
        expanded: false
      });
    };

    _this.state = {
      isRotated: false,
      items: [],
      selected: 'responsive',
      expanded: false
    };

    _this.listener = function () {
      _this.setState({
        selected: null
      });
    };

    return _this;
  }

  _createClass(ViewportTool, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var api = this.props.api;
      api.on(_coreEvents.SET_STORIES, this.listener);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var api = this.props.api;
      api.off(_coreEvents.SET_STORIES, this.listener);
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var expanded = this.state.expanded;

      var _getState = getState(this.props, this.state, this.change),
          items = _getState.items,
          selected = _getState.selected,
          isRotated = _getState.isRotated;

      var item = items.find(function (i) {
        return i.id === selected;
      });
      var viewportX = 0;
      var viewportY = 0;
      var viewportTitle = '';

      if (item) {
        var height = item.value.height.replace('px', '');
        var width = item.value.width.replace('px', '');
        viewportX = isRotated ? height : width;
        viewportY = isRotated ? width : height;
        viewportTitle = isRotated ? "".concat(item.title, " (L)") : "".concat(item.title, " (P)");
      }

      return items.length ? _react["default"].createElement(_react.Fragment, null, item ? _react["default"].createElement(_theming.Global, {
        styles: _defineProperty({}, "#".concat(iframeId), Object.assign({
          position: 'relative',
          display: 'block',
          margin: '10px auto',
          border: '1px solid #888',
          borderRadius: 4,
          boxShadow: '0 4px 8px 0 rgba(0,0,0,0.12), 0 2px 4px 0 rgba(0,0,0,0.08);',
          boxSizing: 'content-box'
        }, isRotated ? flip(item.value || {}) : item.value || {}))
      }) : null, _react["default"].createElement(_components.WithTooltip, {
        placement: "top",
        trigger: "click",
        tooltipShown: expanded,
        onVisibilityChange: function onVisibilityChange(s) {
          return _this3.setState({
            expanded: s
          });
        },
        tooltip: _react["default"].createElement(_components.TooltipLinkList, {
          links: items
        }),
        closeOnClick: true
      }, _react["default"].createElement(IconButtonWithLabel, {
        key: "viewport",
        title: "Change the size of the preview",
        active: !!item,
        onDoubleClick: function onDoubleClick(e) {
          return _this3.resetViewport(e);
        }
      }, _react["default"].createElement(_components.Icons, {
        icon: "grow"
      }), _react["default"].createElement(IconButtonLabel, null, viewportTitle))), item ? _react["default"].createElement(ActiveViewportSize, null, _react["default"].createElement(ActiveViewportLabel, {
        title: "Viewport width"
      }, viewportX), _react["default"].createElement(_components.IconButton, {
        key: "viewport-rotate",
        title: "Rotate viewport",
        onClick: this.flipViewport
      }, _react["default"].createElement(_components.Icons, {
        icon: "transfer"
      })), _react["default"].createElement(ActiveViewportLabel, {
        title: "Viewport height"
      }, viewportY)) : null) : null;
    }
  }]);

  return ViewportTool;
}(_react.Component);

exports["default"] = ViewportTool;
ViewportTool.propTypes = {
  api: _propTypes["default"].shape({
    on: _propTypes["default"].func
  }).isRequired
};